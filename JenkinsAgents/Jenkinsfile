properties([
  parameters([
    string(name: 'CONTAINER_REGISTRY_SERVER', defaultValue: 'poiacr.azurecr.io'),
    string(name: 'CONTAINER_REGISTRY_JENKINS_CREDENTIALS', defaultValue: 'poi-acr-credentials'),
  ])
])

pipeline {
    agent {
        docker {
            image 'docker:latest'
            args '-u root -v /var/run/docker.sock:/var/run/docker.sock' 
        }
    }
    environment {
        CONTAINER_REG_CRED = credentials("${params.CONTAINER_REGISTRY_JENKINS_CREDENTIALS}")
        def REGISTRY_SERVER = "${params.CONTAINER_REGISTRY_SERVER}"
        def WORKING_DIR = 'JenkinsAgents'
    }
    stages {
        stage('Build') {
            steps {
                sh 'cd ${WORKING_DIR} && docker build -f MavenBuildDocker.Dockerfile . -t ${REGISTRY_SERVER}/devopsoh/maven:build'
                sh 'cd ${WORKING_DIR} && docker build -f GoBuildDocker.Dockerfile . -t ${REGISTRY_SERVER}/devopsoh/go:build'
                sh 'cd ${WORKING_DIR} && docker build -f NetCoreBuildDocker.Dockerfile . -t ${REGISTRY_SERVER}/devopsoh/netcore:build'
                sh 'cd ${WORKING_DIR} && docker build -f NodeJSBuildDocker.Dockerfile . -t ${REGISTRY_SERVER}/devopsoh/nodejs:build'
            }
        }
        stage('DockerPush') {
            steps {
                sh 'docker login -p ${CONTAINER_REG_CRED_PSW} -u ${CONTAINER_REG_CRED_USR} ${REGISTRY_SERVER}'  
                sh 'docker push ${REGISTRY_SERVER}/devopsoh/maven:build'
                sh 'docker push ${REGISTRY_SERVER}/devopsoh/go:build'
                sh 'docker push ${REGISTRY_SERVER}/devopsoh/netcore:build'
                sh 'docker push ${REGISTRY_SERVER}/devopsoh/nodejs:build'
            }
        }
    }
}
